@page "/students/delete"

@using Microsoft.EntityFrameworkCore
@using BlazorApp3.Data
@inject IDbContextFactory<BlazorApp3.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete Student</PageTitle>

<h1><i class="fa-solid fa-trash"></i></h1>

<h3>Are you sure you want to delete this student?</h3>
<div>
    <h4>Student</h4>
    <hr />
    @if (student is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@student.Name</dd>
            <dt class="col-sm-2">Code</dt>
            <dd class="col-sm-10">@student.Code</dd>
            <dt class="col-sm-2">Email</dt>
            <dd class="col-sm-10">@student.Email</dd>
            <dt class="col-sm-2">Phone</dt>
            <dd class="col-sm-10">@student.PhoneNumber</dd>
            <dt class="col-sm-2">Role</dt>
            <dd class="col-sm-10">@student.Role</dd>
            <dt class="col-sm-2">Sex</dt>
            <dd class="col-sm-10">@student.Sex</dd>
            <dt class="col-sm-2">Address</dt>
            <dd class="col-sm-10">@student.Address</dd>
        </dl>
        <EditForm Model="student" OnValidSubmit="DeleteStudent" FormName="deleteForm">
            <button type="submit" class="btn btn-danger">Delete</button> |
            <a href="/students">Back to List</a>
        </EditForm>
    }
</div>

@code {
    ApplicationUser? student;

    [SupplyParameterFromQuery]
    public string Id { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        student = await context.Users.FirstOrDefaultAsync(m => m.Id == Id && m.Role == "Student");

        if (student is null)
        {
            NavigationManager.NavigateTo("/students/notfound");
        }
    }

    public async Task DeleteStudent()
    {
        using var context = DbFactory.CreateDbContext();
        var studentToDelete = await context.Users.FindAsync(Id);

        if (studentToDelete != null)
        {
            context.Users.Remove(studentToDelete);
            await context.SaveChangesAsync();
        }

        NavigationManager.NavigateTo("/students");
    }
}
