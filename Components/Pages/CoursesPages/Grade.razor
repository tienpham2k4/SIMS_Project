@page "/courses/grade"

@using Microsoft.EntityFrameworkCore
@using BlazorApp3.Models
@inject IDbContextFactory<BlazorApp3.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
<PageTitle>Add Grades</PageTitle>

<h1>Add Grades</h1>
@if (showNotification)
{
    <div class="alert alert-success mt-3">Grades and Notes have been successfully saved!</div>
}
<div>
    <hr />
    @if (courses is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <div class="row">
            <div class="col-6">
                <dl class="row">
                    <dt class="col-sm-2">Name</dt>
                    <dd class="col-sm-10">@courses.Name</dd>
                    <dt class="col-sm-2">StartDate</dt>
                    <dd class="col-sm-10">@courses.StartDate</dd>
                    <dt class="col-sm-2">EndDate</dt>
                    <dd class="col-sm-10">@courses.EndDate</dd>

                </dl>
            </div>
            <div class="col-6">
                <dl class="row">
                    <dt class="col-sm-2">Semester</dt>
                    <dd class="col-sm-10">@courses.Semester.Name</dd>
                    <dt class="col-sm-2">Lecture</dt>
                    <dd class="col-sm-10">@courses.Lecture.Name</dd>
                    <dt class="col-sm-2">Subject</dt>
                    <dd class="col-sm-10">@courses.Subject.Name</dd>
                </dl>
            </div>
        </div>
    }
    <hr />
    <h3>List of Students Enrolled</h3>
    <table class="table table-bordered">
        <thead>
            <tr>
                <th class="text-center">No</th>
                <th class="text-center">Code</th>
                <th class="text-center">Name</th>
                <th class="text-center">Email</th>
                <th class="text-center">Grade</th>
                <th class="text-center">Note</th>
            </tr>
        </thead>
        <tbody>
            @if (StudentCourses != null && StudentCourses.Count > 0)
            {
                int i = 1;
                @foreach (var student in StudentCourses)
                {
                    <tr>
                        <td class="text-center">@i</td>
                        <td class="text-center">@student.Student.Code</td>
                        <td class="text-center">@student.Student.Name</td>
                        <td class="text-center">@student.Student.Email</td>
                        <td class="text-center">
                            <input type="text" @bind="student.Grade" class="form-control" placeholder="Grade" />
                        </td>
                        <td class="text-center">
                            <input type="text" @bind="student.Note" class="form-control" placeholder="Note" />
                        </td>
                    </tr>
                    i++;
                }
            }
            else
            {
                <tr>
                    <td colspan="6" class="text-center">No data!</td>
                </tr>
            }
        </tbody>
    </table>
    <button class="btn btn-primary mt-3" @onclick="SaveGradesAndNotes">Save Grades and Notes</button>

</div>

@code {
    Courses? courses;
    private bool showNotification = false;

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    public List<StudentCourse> StudentCourses { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        courses = await context.Courses
            .Include(m => m.Semester)
            .Include(m => m.Subject)
            .Include(m => m.Lecture)
            .FirstOrDefaultAsync(m => m.Id == Id);

        StudentCourses = await context.StudentCourses
            .Where(course => course.CourseId == Id)
            .Include(student => student.Student)
            .ToListAsync();

        if (courses is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task SaveGradesAndNotes()
    {
        using var context = DbFactory.CreateDbContext();

        foreach (var studentCourse in StudentCourses)
        {
            var existingStudentCourse = await context.StudentCourses
                .FirstOrDefaultAsync(sc => sc.CourseId == Id && sc.StudentId == studentCourse.StudentId);

            if (existingStudentCourse != null)
            {
                existingStudentCourse.Grade = studentCourse.Grade;
                existingStudentCourse.Note = studentCourse.Note;
            }
        }

        await context.SaveChangesAsync();
        showNotification = true;
        StateHasChanged();

        // Hide the notification after a delay
        await Task.Delay(3000);
        showNotification = false;
        StateHasChanged();
    }
}
